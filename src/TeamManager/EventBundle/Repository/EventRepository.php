<?php

namespace TeamManager\EventBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NativeQuery;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{

    /**
     * Returns all events of a given player.
     *
     * @param $pPlayerID
     * @return array
     */
    public function findEventsByPlayer($pPlayerID)
    {
        $query = $this->createQueryBuilder('event');
        $query->join('event.location', 'location')
            ->addSelect('location')
            ->join('event.team', 'team')
            ->addSelect('team')
            ->innerJoin('team.players', 'player', 'WITH', 'player.id = :playerID')
            ->setParameter(':playerID', $pPlayerID)
            ->orderBy('event.date')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * Returns all events of a given player.
     *
     * @param $pPlayerID
     * @return array
     */
    public function findEventsByPlayerForSeason($pPlayerID, $season)
    {
        $query = $this->createQueryBuilder('event');
        $query->join('event.location', 'location')
            ->addSelect('location')
            ->join('event.team', 'team')
            ->addSelect('team')
            ->innerJoin('team.players', 'player', 'WITH', 'player.id = :playerID')
            ->where('event.season = :season')
            ->setParameters(array(
                'playerID'=>$pPlayerID,
                'season'=>$season
            ))
            ->orderBy('event.date')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * Returns all events of a given team.
     * Native query is used because the related team is owned by the games and training subclasses.
     * Impossible with query builder to test a column of a subclass.
     * This is done because each one is mapped by different names in teams and players (trainings, games, friendly_games)
     *
     * @param $teamID
     * @return array
     */
    public function findEventsByTeam($teamID)
    {
        $query = $this->createQueryBuilder('event');
        $query->join('event.location', 'location')
            ->addSelect('location')
            ->join('event.team', 'team', 'WITH', 'team.id = :teamID')
            ->addSelect('team')
            ->setParameter(':teamID', $teamID)
            ->orderBy('event.date')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * Returns all events of a given team.
     *
     * @param $teamID
     * @return array
     */
    public function findEventsByTeamForSeason($teamID, $season)
    {
        $query = $this->createQueryBuilder('event');
        $query->join('event.location', 'location')
            ->addSelect('location')
            ->join('event.team', 'team', 'WITH', 'team.id = :teamID')
            ->addSelect('team')
            ->where('event.season = :season')
            ->setParameters(array(
                'teamID'=>$teamID,
                'season'=>$season
            ))
            ->orderBy('event.date')
        ;
        return $query->getQuery()->getResult();
    }

}
