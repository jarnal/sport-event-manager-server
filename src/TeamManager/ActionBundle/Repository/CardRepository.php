<?php

namespace TeamManager\ActionBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CardRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CardRepository extends EntityRepository
{

    /**
     * @param $id
     */
    public function findOneById($id, $fullObject=true)
    {
        $query = $this->createQueryBuilder('card');
        $query->where('card.id = :id')
            ->setParameter(':id', $id)
        ;
        if($fullObject){
            $query->join('card.player', 'player')
                ->addSelect('player')
                ->join('card.game', 'game')
                ->addSelect('game')
            ;
        }

        $result = $query->getQuery()->getResult();
        if(isset($result[0])){
            return $result[0];
        }
        return $query->getQuery()->getResult();
    }

    /**
     * Retrieves all cards for a given player.
     *
     * @param $id
     */
    public function getCardsByPlayer($playerID)
    {
        $query = $this->createQueryBuilder('card');
        $query->innerJoin('card.player', 'player', 'WITH', 'player.id = :playerID')
            ->setParameter('playerID', $playerID)
            ->join('card.game', 'game')
            ->addSelect('game')
        ;

        return $query->getQuery()->getResult();
    }

    /**
     * Retrieves all cards of a specific season for a given player.
     *
     * @param $playerID
     * @param $seasonID
     */
    public function getCardsByPlayerForSeason($playerID, $season)
    {
        $query = $this->createQueryBuilder('card');
        $query->innerJoin('card.player', 'player', 'WITH', 'player.id = :playerID')
            ->join('card.game', 'game')
            ->addSelect('game')
            ->where('game.season = :season')
            ->setParameters( array(
                'playerID'=>$playerID,
                'season'=>$season
            ))
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * Retrieves all cards of a specific game for a given player.
     *
     * @param $playerID
     * @param $gameID
     */
    public function getCardsByPlayerForGame($playerID, $gameID)
    {
        $query = $this->createQueryBuilder('card');
        $query->join('card.player', 'player')
            ->join('card.game', 'game')
            ->where('game.id = :gameID')
            ->andWhere('player.id = :playerID')
            ->setParameter('gameID', $gameID)
            ->setParameter('playerID', $playerID)
        ;

        return $query->getQuery()->getResult();
    }

    /**
     * Retrieves all cards for a given team.
     *
     * @param $id
     */
    public function getCardsByTeam($teamID)
    {
        $query = $this->createQueryBuilder('card');
        $query->join('card.player', 'player')
            ->addSelect('player')
            ->join('card.game', 'game')
            ->addSelect('game')
            ->join('game.team', 'team', 'WITH', 'team.id = :teamID')
            ->setParameter('teamID', $teamID)
        ;

        return $query->getQuery()->getResult();
    }

    /**
     * Retrieves all cards of a specific season for a given team.
     *
     * @param $playerID
     * @param $seasonID
     */
    public function getCardsByTeamForSeason($teamID, $season)
    {
        $query = $this->createQueryBuilder('card');
        $query->join('card.player', 'player')
            ->addSelect('player')
            ->join('card.game', 'game')
            ->join('game.team', 'team', 'WITH', 'team.id = :teamID')
            ->where('game.season = :season')
            ->setParameters( array(
                'teamID'=> $teamID,
                'season'=>$season
            ))
        ;

        return $query->getQuery()->getResult();
    }

    /**
     * Retrieves all cards of a specific game for a given team.
     *
     * @param $playerID
     * @param $gameID
     */
    public function getCardsByTeamForGame($teamID, $gameID)
    {
        $query = $this->createQueryBuilder('card');
        $query->join('card.player', 'player')
            ->addSelect('player')
            ->join('card.game', 'game')
            ->innerjoin('game.team', 'team', 'WITH', 'team.id = :teamID')
            ->setParameter('teamID', $teamID)
            ->where('game.id = :gameID')
            ->setParameter('gameID', $gameID)
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * Retrieves all cards for a given game.
     *
     * @param $id
     */
    public function getCardsByGame($gameID)
    {
        $query = $this->createQueryBuilder('card');
        $query->join('card.player', 'player')
            ->join('card.game', 'game')
            ->where('game.id = :gameID')
            ->setParameter('gameID', $gameID)
        ;
        return $query->getQuery()->getResult();
    }

}
