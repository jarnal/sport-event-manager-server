<?php

namespace TeamManager\EventBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends EntityRepository
{

    /**
     *
     */
    public function findAll()
    {
        $query = $this->createQueryBuilder('game');
        $query->join('game.location', 'location')
            ->addSelect('location')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * @param $id
     */
    public function findOneById($id)
    {
        $query = $this->createQueryBuilder('game');
        $query->leftJoin('game.expected_players', 'expected_players')
            ->leftJoin('game.missing_players', 'missing_players')
            ->leftJoin('game.present_players', 'present_players')
            ->join('game.location', 'location')
            ->addSelect('expected_players')
            ->addSelect('missing_players')
            ->addSelect('present_players')
            ->addSelect('location')
            ->where('game.id = :id')
            ->setParameter(':id', $id)
        ;
        return $query->getQuery()->getResult()[0];
    }

    /**
     *
     *
     * @param $playerID
     * @return array
     */
    public function findGamesByPlayer($playerID)
    {
        $query = $this->createQueryBuilder('game');
        $query->innerjoin('game.team', 'team', 'WITH', 'team = game.team')
            ->innerjoin('team.players', 'player', 'WITH', $query->expr()->eq('player.id', $playerID))
            ->where('game.friendly = 0')
            ->orderBy('game.date', 'DESC')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     *
     *
     * @param $playerID
     * @param $seasonID
     * @return array
     */
    public function findGamesForPlayerBySeason($playerID, $season)
    {
        $query = $this->createQueryBuilder('game');
        $query->innerjoin('game.team', 'team', 'WITH', 'team = game.team')
            ->innerjoin('team.players', 'player', 'WITH', $query->expr()->eq('player.id', $playerID))
            ->where('game.friendly = 0')
            ->andWhere('game.season = :season')
            ->setParameter('season', $season)
            ->orderBy('game.date', 'DESC')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     *
     *
     * @param $playerID
     * @return array
     */
    public function findFriendlyGamesByPlayer($playerID)
    {
        $query = $this->createQueryBuilder('game');
        $query->innerjoin('game.team', 'team', 'WITH', 'team = game.team')
            ->innerjoin('team.players', 'player', 'WITH', $query->expr()->eq('player.id', $playerID))
            ->where('game.friendly = 1')
            ->orderBy('game.date', 'DESC')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     *
     *
     * @param $playerID
     * @param $seasonID
     * @return array
     */
    public function findFriendlyGamesForPlayerBySeason($playerID, $season)
    {
        $query = $this->createQueryBuilder('game');
        $query->innerjoin('game.team', 'team', 'WITH', 'team = game.team')
            ->innerjoin('team.players', 'player', 'WITH', $query->expr()->eq('player.id', $playerID))
            ->where('game.friendly = 1')
            ->andWhere('game.season = :season')
            ->setParameter('season', $season)
            ->orderBy('game.date', 'DESC')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     *
     *
     * @param $teamID
     * @return array
     */
    public function findGamesByTeam($teamID)
    {
        $query = $this->createQueryBuilder('game');
        $query->innerjoin('game.team', 'team', 'WITH', $query->expr()->eq('team.id', $teamID))
            ->where('game.friendly = 0')
            ->orderBy('game.date', 'DESC')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     *
     *
     * @param $teamID
     * @param $seasonID
     * @return array
     */
    public function findGamesForTeamBySeason($teamID, $season)
    {
        $query = $this->createQueryBuilder('game');
        $query->innerjoin('game.team', 'team', 'WITH', $query->expr()->eq('team.id', $teamID))
            ->where('game.friendly = 0')
            ->andWhere('game.season = :season')
            ->setParameter('season', $season)
            ->orderBy('game.date', 'DESC')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     *
     *
     * @param $teamID
     * @return array
     */
    public function findFriendlyGamesByTeam($teamID)
    {
        $query = $this->createQueryBuilder('game');
        $query->innerjoin('game.team', 'team', 'WITH', $query->expr()->eq('team.id', $teamID))
            ->where('game.friendly = 1')
            ->orderBy('game.date', 'DESC')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     *
     *
     * @param $teamID
     * @param $seasonID
     * @return array
     */
    public function findFriendlyGamesForTeamBySeason($teamID, $season)
    {
        $query = $this->createQueryBuilder('game');
        $query->innerjoin('game.team', 'team', 'WITH', $query->expr()->eq('team.id', $teamID))
            ->where('game.friendly = 1')
            ->andWhere('game.season = :season')
            ->setParameter('season', $season)
            ->orderBy('game.date', 'DESC')
        ;
        return $query->getQuery()->getResult();
    }

}
