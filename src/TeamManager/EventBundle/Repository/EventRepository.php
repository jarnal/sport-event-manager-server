<?php

namespace TeamManager\EventBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{

    /**
     * Returns all events of a given player.
     *
     * @param $pPlayerID
     * @return array
     */
    public function findEventsByPlayer($pPlayerID)
    {
        $query = $this->createQueryBuilder('event');
        $query->leftJoin('TeamManagerEventBundle:Game', 'game', 'WITH', $query->expr()->eq('game.id', 'event.id'))
            ->leftJoin('TeamManagerEventBundle:Training', 'training', 'WITH', $query->expr()->eq('training.id', 'event.id'))
            ->innerjoin('TeamManagerTeamBundle:Team', 'team', 'WITH', 'team = game.team OR team = training.team')
            ->innerjoin('team.players', 'player', 'WITH', $query->expr()->eq('player.id', $pPlayerID))
            ->join('event.location', 'location')
            ->orderBy('event.date')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * Returns all events of a given player.
     *
     * @param $pPlayerID
     * @return array
     */
    public function findEventsByPlayerForSeason($pPlayerID, $season)
    {
        $query = $this->createQueryBuilder('event');
        $query->leftJoin('TeamManagerEventBundle:Game', 'game', 'WITH', $query->expr()->eq('game.id', 'event.id'))
            ->leftJoin('TeamManagerEventBundle:Training', 'training', 'WITH', $query->expr()->eq('training.id', 'event.id'))
            ->innerjoin('TeamManagerTeamBundle:Team', 'team', 'WITH', 'team = game.team OR team = training.team')
            ->innerjoin('team.players', 'player', 'WITH', $query->expr()->eq('player.id', $pPlayerID))
            ->join('event.location', 'location')
            ->where('event.season = :season')
            ->setParameter('season', $season)
            ->orderBy('event.date')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * Returns all events of a given team.
     *
     * @param $teamID
     * @return array
     */
    public function findEventsByTeam($teamID)
    {
        $query = $this->createQueryBuilder('event');
        $query->leftJoin('TeamManagerEventBundle:Game', 'game', 'WITH', $query->expr()->eq('game.id', 'event.id'))
            ->leftJoin('TeamManagerEventBundle:Training', 'training', 'WITH', $query->expr()->eq('training.id', 'event.id'))
            ->innerjoin('TeamManagerTeamBundle:Team', 'team', 'WITH', 'team = game.team OR team = training.team')
            ->where('team.id = :teamID')
            ->setParameter('teamID', $teamID)
            ->join('event.location', 'location')
            ->orderBy('event.date')
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * Returns all events of a given team.
     *
     * @param $teamID
     * @return array
     */
    public function findEventsByTeamForSeason($teamID, $season)
    {
        $query = $this->createQueryBuilder('event');
        $query->leftJoin('TeamManagerEventBundle:Game', 'game', 'WITH', $query->expr()->eq('game.id', 'event.id'))
            ->leftJoin('TeamManagerEventBundle:Training', 'training', 'WITH', $query->expr()->eq('training.id', 'event.id'))
            ->innerjoin('TeamManagerTeamBundle:Team', 'team', 'WITH', 'team = game.team OR team = training.team')
            ->where('team.id = :teamID')
            ->setParameter('teamID', $teamID)
            ->andWhere('event.season = :season')
            ->setParameter('season', $season)
            ->join('event.location', 'location')
            ->orderBy('event.date')
        ;
        return $query->getQuery()->getResult();
    }

}
